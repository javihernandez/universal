/*!
  GPII Web Sockets Settings Handler

  Copyright 2014 Emergya

  Licensed under the New BSD license. You may not use this file except in
  compliance with this License.

  You may obtain a copy of the License at
  https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {

    "use strict";

    var fluid = require("infusion"),
        gpii = fluid.registerNamespace("gpii"),
        settingsHandlers = fluid.registerNamespace("gpii.settingsHandlers");

        fluid.registerNamespace("gpii.settingsHandlers.WebSocketsSettingsHandler");

    settingsHandlers.WebSocketsSettingsHandler.isRegistered = function (appId) {
        for(var i = 0; i < gpii.registeredBrowsers.length; i++) {
            for(var browser in gpii.registeredBrowsers[i]){
                if (gpii.registeredBrowsers[i][browser].id === appId) {
                    return gpii.registeredBrowsers[i][browser].socket;
                } else {
                    return false;
                }
            };
        }
    };

    settingsHandlers.WebSocketsSettingsHandler.getImpl = function (payload) {
        console.log("## at .getImpl - payload: " + JSON.stringify(payload));
        var returnPayload = fluid.copy(payload);
        var settings = returnPayload.settings;

        var promise = fluid.promise();

        var browserSocket = settingsHandlers.WebSocketsSettingsHandler.isRegistered("org.chrome.cloud4chrome");
        if (browserSocket) {
            browserSocket.emit("getSettings", settings);
            browserSocket.on("gotSettings", function onGotSettings(returnedPayload) {
                var returnValue = {
                    settings: returnedPayload
                }
                console.log("## after .getImpl - payload: " + JSON.stringify(returnValue));
                promise.resolve(returnValue);
            });
            return promise;
        }
    };

    settingsHandlers.WebSocketsSettingsHandler.setImpl = function (payload) {
        console.log("## at .setImpl - payload: " + JSON.stringify(payload));
        var returnPayload = fluid.copy(payload);
        var settings = returnPayload.settings;

        var promise = fluid.promise();

        var browserSocket = settingsHandlers.WebSocketsSettingsHandler.isRegistered("org.chrome.cloud4chrome");
        if (browserSocket) {
            browserSocket.emit("setSettings", settings);
            browserSocket.on("onSetSettings", function onSetSettings(returnedPayload) {
                var returnValue = { 
                    settings: returnedPayload
                };
                console.log("## after .setImpl - payload: " + JSON.stringify(returnValue));
                promise.resolve(returnValue);
            });
            return promise;
        }

    };

    settingsHandlers.WebSocketsSettingsHandler.get = function (payload) {
        return gpii.settingsHandlers.invokeSettingsHandler(settingsHandlers.WebSocketsSettingsHandler.getImpl, payload);
    }

    settingsHandlers.WebSocketsSettingsHandler.set = function (payload) {
        return gpii.settingsHandlers.invokeSettingsHandler(settingsHandlers.WebSocketsSettingsHandler.setImpl, payload);
    }


}());
