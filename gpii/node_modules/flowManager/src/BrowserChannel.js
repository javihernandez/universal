(function () {

    "use strict";

    var fluid = require("infusion");
    var gpii = fluid.registerNamespace("gpii");

    gpii.registeredBrowsers = {};

    fluid.registerNamespace("gpii.request.flowManager");

    fluid.defaults("gpii.flowManager.browserChannel", {
        gradeNames: ["fluid.standardRelayComponent", "autoInit"],
        model: {
            registeredBrowsers: []
        },
        invokers: {
            addBrowser: {
                funcName: "gpii.flowManager.browserChannel.addBrowser",
                args: ["{that}", "{arguments}.1", "{arguments}.2"]
            },
            removeBrowser: {
                funcName: "gpii.flowManager.browserChannel.removeBrowser",
                args: ["{that}", "{arguments}.1"]
            }
        }
    });

    fluid.defaults("kettle.requests.request.handler.browserChannel", {
        gradeNames: ["gpii.request.flowManager.sessionAware", "autoInit"],
        invokers: {
            handle: {
                funcName: "gpii.request.flowManager.browserChannelHandle",
                args: ["{flowManager}.browserChannel", "{request}"],
                dynamic: true
            }
        }
    });

    gpii.request.flowManager.browserChannelHandle = function (browserChannel, fluidRequest) {
        var data = JSON.parse(fluidRequest.data);

        console.log("Received a connect request from the following client: " + JSON.stringify(data));

        browserChannel.addBrowser(browserChannel, data, fluidRequest.socket);

        // To check the list of registeredBrowsers
        //
        //for(var i = 0; i < browserChannel.model.registeredBrowsers.length; i++) {
        //    for(var attributename in browserChannel.model.registeredBrowsers[i]){
        //        console.log(attributename);
        //    }
        //}

        fluidRequest.socket.emit("onNewBrowserConnected", fluidRequest.socket.id);

        fluidRequest.socket.on("disconnect", function () {
            browserChannel.removeBrowser(browserChannel, fluidRequest.socket);
        });
    };

    gpii.flowManager.browserChannel.addBrowser = function (that, data, socket) {

        var newBrowser = {};
        newBrowser[socket.id] = {
            id: data.id,
            socket: socket
        }

        that.model.registeredBrowsers.push(newBrowser);
        gpii.registeredBrowsers = that.model.registeredBrowsers;
    };

    gpii.flowManager.browserChannel.removeBrowser = function (that, socket) {
        that.model.registeredBrowsers.pop(socket);
        gpii.registeredBrowsers = that.model.registeredBrowsers;
    };

})();
