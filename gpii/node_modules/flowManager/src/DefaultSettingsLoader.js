/*!
 * Default Settings Loader
 *
 * Copyright 2018 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = fluid || require("infusion"),
    gpii = fluid.registerNamespace("gpii"),
    fs = require("fs"),
    path = require("path"),
    request = require("request"),
    JSON5 = require("json5");

fluid.defaults("gpii.defaultSettingsLoader", {
    gradeNames: ["fluid.component"],
    // The path to the file that has all QSS supported settings.
    defaultSettingsInCodeBase: "%gpii-universal/testData/defaultSettings/defaultSettings.json5",
    // The URL to the reset to standard snapshot. This should be provided from gpii-app's siteconfig file.
    defaultSettingsUrl: null,
    members: {
        gpiiSettingsDir: "@expand:{settingsDir}.getGpiiSettingsDir()",
        // It points to the default settings file in the settings directory. GPII should read from this file instead of defaultSettingsInCodeBase.
        //defaultSettingsFile: "@expand:{that}.prepareSettingsFile()"
    },
    components: {
        settingsDir: {
            type: "gpii.settingsDir"
        }
    },
    invokers: {
        get: {
            funcName: "gpii.defaultSettingsLoader.get"
        },
        prepareSettingsFile: {
            funcName: "gpii.defaultSettingsLoader.prepareSettingsFile",
            args: ["{that}", "{that}.options.defaultSettingsInCodeBase", "{that}.options.defaultSettingsUrl", "{that}.gpiiSettingsDir"]
        }
    }
});

gpii.defaultSettingsLoader.downloadSettingsFile = function (that, defaultSettingsFileUrl, defaultSettingsFile) {
    fluid.log("## on downloadSettingsFile");
    var promise = fluid.promise();

    var req = request.get({
        uri: defaultSettingsFileUrl
    });

    var outStream = fs.createWriteStream(defaultSettingsFile);
    fluid.log("## on downloadSettingsFile - after performing the request");

    req.on("error", promise.reject);
    req.on("response", function (response) {
        fluid.log("## on downloadSettingsFile - on response");
        if (response.statusCode === 200) {
            response.pipe(outStream);
            response.on("end", function () {
                outStream.close();
                outStream = null;
                that.options.defaultSettingsFile = defaultSettingsFile;
                promise.resolve(defaultSettingsFile);
            });
        } else {
            // TODO: What to do if the file can't be downloaded?
            //
            promise.resolve();
        }
    });

    return promise;
}

/**
 * Copy default settings file from the code base to the setting dir if it hasn't been copied.
 * @param {String} that
 * @param {String} defaultSettingsInCodeBase - The path to the fallback default settings file shipped in the codebase.
 * @param {String} defaultSettingsUrl - URL to the default settings that the system should use.
 * @param {String} gpiiSettingsDir - GPII settings directory.
 * @return {Object} Sets that.defaultSettingsFile to the path to the default settings file in the settings dir.
 */
gpii.defaultSettingsLoader.prepareSettingsFile = function (that, defaultSettingsInCodeBase, defaultSettingsUrl, gpiiSettingsDir) {
    fluid.log("## on prepareSettingsFile - ", defaultSettingsInCodeBase, defaultSettingsUrl, gpiiSettingsDir);
    var gpiiSettingsAbsolutePath = fluid.module.resolvePath(gpiiSettingsDir);
    fluid.log("## on prepareSettingsFile - after resolvePath");
    var defaultSettingsFile;
    var defaultSettingsFileName;

    if (defaultSettingsUrl) {
        fluid.log("## on prepareSettingsFile - there is a defaultSettingsUrl");
        defaultSettingsFileName = path.basename(defaultSettingsUrl);
        defaultSettingsFile = path.join(gpiiSettingsAbsolutePath, defaultSettingsFileName);
        return gpii.defaultSettingsLoader.downloadSettingsFile(that, defaultSettingsUrl, defaultSettingsFile);
    // We still keep the defaultSettingsInCodeBase as fallback
    } else {
        fluid.log("## on prepareSettingsFile - there is not a defaultSettingsUrl");
        var defaultSettingsInCodeBaseFullPath = fluid.module.resolvePath(defaultSettingsInCodeBase);

        if (!fs.existsSync(defaultSettingsInCodeBaseFullPath)) {
            return undefined;
        }

        defaultSettingsFileName = path.basename(defaultSettingsInCodeBaseFullPath);
        defaultSettingsFile = path.join(gpiiSettingsAbsolutePath, defaultSettingsFileName);

        // Copy the default settings file to the settings dir if it doesn't already in there
        if (!fs.existsSync(defaultSettingsFile)) {
            fs.writeFileSync(defaultSettingsFile, fs.readFileSync(defaultSettingsInCodeBaseFullPath, "utf-8"));
        }
        return fluid.toPromise(defaultSettingsFile);
    }
};

/**
 * Read QSS settings from the file system
 *
 * @param {Promise} defaultSettingsFile - A promise containing the value og defaultSettingsFile
 * @return {Object} Default settings.
 */
gpii.defaultSettingsLoader.get = function (defaultSettingsFile) {
    fluid.log("## on defaultSettingsLoader - defaultSettingsFile: ", defaultSettingsFile);
    return defaultSettingsFile ? JSON5.parse(fs.readFileSync(defaultSettingsFile)) : undefined;
};
